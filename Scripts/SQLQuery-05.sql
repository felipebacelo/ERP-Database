USE ERP;

-- CRIANDO PROCEDURE PARA GERAR PEDIDO DE COMPRAS COM BASE NAS NECESSIDADES DA ORDEM DE PRODUÇÃO
CREATE PROCEDURE PROC_GER_PED_COMPRAS (@COD_EMPRESA INT, @MES VARCHAR(2), @ANO VARCHAR(4)) AS
BEGIN
	DECLARE @PED_AUX TABLE (NUM_PEDIDO_AUX INT)
	DECLARE @RETORNO TABLE (RET_ORD INT, RET_SIT VARCHAR(1))
	DECLARE	@COD_EMPRESA_AUX INT,
		@MES_AUX VARCHAR(2),
		@ANO_AUX VARCHAR(4),
		@NUM_PEDIDO INT,
		@ID_ORDEM INT,
		@NUM_PEDIDO_AUX INT,
		@COD_MAT INT,
		@ID_FOR INT,
		@COD_PAGTO INT,
		@DATA_PEDIDO DATE,
		@DATA_ENTREGA DATE,
		@SITUACAO VARCHAR(1),
		@QTD DECIMAL(10,2),
		@PRECO_UNIT DECIMAL(10,2),
		@CONT_SEQ INT,
		@TOTAL_PED DECIMAL(10,2),
		@ERRO_INTERNO INT
		SET @TOTAL_PED=0;

BEGIN TRANSACTION
	BEGIN TRY
		IF (@MES = '1')
			BEGIN
				SET @MES_AUX = 12;
				SET @ANO_AUX = @ANO - 1;
			END
		ELSE
			BEGIN
				SET @MES_AUX = @MES - 1;
				SET @ANO_AUX = @ANO;
			END
-- VERIFICANDO SE EXISTE ORDEM PARA PLANEJ STATUS ABERTO
			SELECT A.COD_EMPRESA, A.ID_ORDEM FROM ORDEM_PROD A
			WHERE A.COD_EMPRESA = @COD_EMPRESA
			AND MONTH(A.DATA_INI) = @MES
			AND YEAR(A.DATA_INI) = @ANO
			AND A.SITUACAO = 'A'
		IF @@ROWCOUNT = 0
			BEGIN
				SET @ERRO_INTERNO = 1
			END
		ELSE
			BEGIN
				SET @CONT_SEQ = 1
-- DECLARANDO CURSOR PARA GRAVAR CABEÇALHO PEDIDO DE COMPRAS
-- SELECT PARA GERAR NECESSIDADES DE COMPRAS CONFORME ORDEM DE PRODUÇÃO
-- CONFORME FICHA TÉCNICA E PRODUTO COM SEU FORNECEDOR
				DECLARE PED_COMP CURSOR FOR
					SELECT DISTINCT A.COD_EMPRESA, C.ID_FOR, D.COD_PAGTO,
					CAST('15-' + @MES_AUX + '-' + @ANO_AUX AS DATE) AS DATA_PEDIDO,
					CAST('15-' + @MES + '-' + @ANO AS DATE) DATA_ENTREGA, 'A' SITUACAO
					FROM ORDEM_PROD A
					INNER JOIN FICHA_TECNICA B
					ON A.COD_EMPRESA = B.COD_EMPRESA
					AND A.COD_MAT_PROD = B.COD_MAT_PROD
					INNER JOIN MATERIAL C
					ON A.COD_EMPRESA = C.COD_EMPRESA
					AND B.COD_MAT_NECES = C.COD_MAT
					INNER JOIN FORNECEDORES D
					ON A.COD_EMPRESA  =D.COD_EMPRESA
					AND  C.ID_FOR = D.ID_FOR
					WHERE A.COD_EMPRESA = @COD_EMPRESA
					AND MONTH(A.DATA_INI) = @MES
					AND YEAR(A.DATA_INI) = @ANO
					AND A.SITUACAO = 'A'
				OPEN PED_COMP
				FETCH NEXT FROM PED_COMP
				INTO @COD_EMPRESA_AUX, @ID_FOR, @COD_PAGTO, @DATA_PEDIDO, @DATA_ENTREGA, @SITUACAO
				WHILE @@FETCH_STATUS = 0
			BEGIN
-- PEGANDO NÚMERO DO PEDIDO
				PRINT 'UPDATE DE PARÂMETROS'
				UPDATE PARAMETROS SET VALOR = VALOR + 1
				OUTPUT INSERTED.VALOR INTO @PED_AUX
				WHERE COD_EMPRESA = @COD_EMPRESA
				AND PARAM = 'PED_COMPRAS';
-- ATRIBUINDO VALOR
				SELECT @NUM_PEDIDO_AUX = NUM_PEDIDO_AUX FROM @PED_AUX
-- APRESENTANDO VALORES
				SELECT @COD_EMPRESA COD_EMPRESA, @NUM_PEDIDO_AUX NUM_PEDIDO_AUX,
				@ID_FOR ID_FOR, @COD_PAGTO COD_PAGTO,@DATA_PEDIDO DATA_PEDIDO,
				@DATA_ENTREGA DATA_ENTREGA, @SITUACAO SITUACAO;
-- REALIZANDO INSERT
				INSERT INTO PED_COMPRAS (COD_EMPRESA, NUM_PEDIDO, ID_FOR, COD_PAGTO, DATA_PEDIDO, DATA_ENTREGA, SITUACAO)
				OUTPUT 'INFOR' AS MSG, INSERTED.COD_EMPRESA, INSERTED.NUM_PEDIDO
				VALUES (@COD_EMPRESA, @NUM_PEDIDO_AUX, @ID_FOR, @COD_PAGTO, @DATA_PEDIDO, @DATA_ENTREGA, @SITUACAO);
-- DECLARANDO CURSOR PARA DETALHE PEDIDO
				DECLARE PED_COMP_IT CURSOR FOR
					SELECT A.COD_EMPRESA, B.COD_MAT_NECES COD_MAT, C.ID_FOR,
					SUM(B.QTD_NECES * A.QTD_PLAN) QTD, C.PRECO_UNIT
					FROM ORDEM_PROD A
					INNER JOIN FICHA_TECNICA B
					ON A.COD_EMPRESA = B.COD_EMPRESA
					AND A.COD_MAT_PROD = B.COD_MAT_PROD
					INNER JOIN MATERIAL C
					ON A.COD_EMPRESA = C.COD_EMPRESA
					AND B.COD_MAT_NECES = C.COD_MAT
					INNER JOIN FORNECEDORES D
					ON A.COD_EMPRESA = D.COD_EMPRESA
					AND C.ID_FOR = D.ID_FOR
					WHERE A.COD_EMPRESA = @COD_EMPRESA
					AND MONTH(A.DATA_INI) = @MES
					AND YEAR(A.DATA_INI) = @ANO
					AND A.SITUACAO = 'A' -- ABERTA
					AND C.ID_FOR = @ID_FOR
					GROUP BY A.COD_EMPRESA, B.COD_MAT_NECES, C.ID_FOR, C.PRECO_UNIT
				OPEN PED_COMP_IT
				FETCH NEXT FROM PED_COMP_IT
				INTO @COD_EMPRESA, @COD_MAT, @ID_FOR, @QTD, @PRECO_UNIT
				WHILE @@FETCH_STATUS = 0
					BEGIN
						IF (@NUM_PEDIDO < >@NUM_PEDIDO_AUX)
						BEGIN 
							SET @CONT_SEQ = 1;
							SET @TOTAL_PED = 0;  
						END
						INSERT INTO PED_COMPRAS_ITENS VALUES
						(@COD_EMPRESA, @NUM_PEDIDO_AUX, @CONT_SEQ, @COD_MAT, @QTD, @PRECO_UNIT);
						SELECT @COD_EMPRESA COD_EMPRESA, @NUM_PEDIDO_AUX NUM_PEDIDO_AUX, @CONT_SEQ CONT_SEQ,
						@COD_MAT COD_MAT, @QTD QTD, @PRECO_UNIT PRECO_UNIT;
						SET @NUM_PEDIDO = @NUM_PEDIDO_AUX;
						SET @CONT_SEQ = @CONT_SEQ + 1;
						SET @TOTAL_PED = @TOTAL_PED + (@QTD * @PRECO_UNIT);
				FETCH NEXT FROM PED_COMP_IT
				INTO  @COD_EMPRESA, @COD_MAT, @ID_FOR, @QTD, @PRECO_UNIT
				END
				CLOSE PED_COMP_IT
				DEALLOCATE PED_COMP_IT
						SELECT @NUM_PEDIDO PEDIDO, @TOTAL_PED AS TOTAL_PEDIDO
						UPDATE PED_COMPRAS SET TOTAL_PED = @TOTAL_PED
						WHERE COD_EMPRESA = @COD_EMPRESA
						AND NUM_PEDIDO = @NUM_PEDIDO;
				FETCH NEXT FROM PED_COMP
				INTO @COD_EMPRESA, @ID_FOR, @COD_PAGTO, @DATA_PEDIDO, @DATA_ENTREGA, @SITUACAO;
					PRINT @NUM_PEDIDO_AUX;
					SET @NUM_PEDIDO = @NUM_PEDIDO_AUX;
					END
				CLOSE PED_COMP
				DEALLOCATE PED_COMP
			END
 -- VERIFICANDO TESTES FINAIS
		IF @@ERROR <> 0
			BEGIN
				ROLLBACK
				PRINT 'OPERAÇÃO CANCELADA'
			END
		ELSE IF @ERRO_INTERNO = 1
			BEGIN
				ROLLBACK
				PRINT 'ORDEM NÃO EXISTE OU NÃO ABERTA'
			END
		ELSE
			BEGIN
-- ATUALIZANDO STATUS DA ORDEM PARA NÃO GERAR MAIS DEMANDAS DE COMPRAS	    
				UPDATE ORDEM_PROD SET SITUACAO = 'P'
				OUTPUT INSERTED.ID_ORDEM, INSERTED.SITUACAO INTO @RETORNO
				WHERE COD_EMPRESA = @COD_EMPRESA
				AND MONTH(DATA_INI) = @MES
				AND YEAR(DATA_INI) = @ANO
				AND SITUACAO = 'A';

				SELECT * FROM @RETORNO

				PRINT 'OPERAÇÃO FINALIZADA COM SUCESSO'
				COMMIT TRANSACTION
			END
	END TRY
				BEGIN CATCH
					SELECT  
					ERROR_NUMBER() AS ERRORNUMBER,
					ERROR_SEVERITY() AS ERRORSEVERITY,
					ERROR_STATE() AS ERRORSTATE,
					ERROR_PROCEDURE() AS ERRORPROCEDURE,
					ERROR_LINE() AS ERRORLINE,
					ERROR_MESSAGE() AS ERRORMESSAGE;
						IF (SELECT CURSOR_STATUS('GLOBAL', 'PED_COMP')) = 1
					BEGIN
						CLOSE PED_COMP
						DEALLOCATE PED_COMP
					END
						IF (SELECT CURSOR_STATUS('GLOBAL', 'PED_COMP_IT')) = 1
					BEGIN
						CLOSE PED_COMP_IT
						DEALLOCATE PED_COMP_IT
					END

					SET XACT_ABORT ON;
					IF @@TRANCOUNT > 0
					ROLLBACK TRANSACTION;
				END CATCH
			END;

-- EXECUTANDO PROCEDURE PROC_GER_PED_COMPRAS
EXEC PROC_GER_PED_COMPRAS @COD_EMPRESA = 1, @MES = 2, @ANO = 2020;