USE ERP;

-- CRIANDO PROCEDURE PARA REALIZAR O MOVIMENTO DE EST0QUE
CREATE PROCEDURE PROC_GERA_ESTOQUE (@COD_EMPRESA INT,
									@TIPO_MOV VARCHAR(1), -- E-ENTRADA, S-SAÍDA
									@COD_MAT INT,
									@LOTE VARCHAR(15),
									@QTD_MOV  DECIMAL(10, 2),
									@DATA_MOVTO DATE)
AS
	BEGIN
		SET NOCOUNT ON
		DECLARE @ERRO_INTERNO INT;

		BEGIN TRANSACTION
		BEGIN TRY
-- VERIFICANDO SE MATERIAL EXISTE
		SELECT COUNT(*) FROM MATERIAL WHERE COD_EMPRESA = @COD_EMPRESA AND COD_MAT = @COD_MAT

		IF @@ROWCOUNT = 0
			BEGIN
			RAISERROR ('MATERIAL NÃO EXISTE', -- MESSAGE TEXT
						10, -- SEVERITY
						1); -- STATE
			SET @ERRO_INTERNO = 2
			END
		ELSE
			BEGIN
-- ESTRUTURA DE SAÍDA
				IF (@TIPO_MOV <> 'S' AND @TIPO_MOV <> 'E')
					BEGIN
						SET @ERRO_INTERNO = 3
					END
-- OPERAÇÃO DE SAÍDA
		ELSE IF (@TIPO_MOV = 'S')
			BEGIN
				IF ((SELECT TOP 1 QTD_SALDO
				FROM ESTOQUE
				WHERE COD_EMPRESA = @COD_EMPRESA
					  AND @COD_MAT = COD_MAT) < @QTD_MOV
				OR (SELECT TOP 1 QTD_LOTE
					FROM ESTOQUE_LOTE
					WHERE COD_EMPRESA = @COD_EMPRESA
						  AND @COD_MAT = COD_MAT
						  AND LOTE = @LOTE) < @QTD_MOV
				OR (SELECT COUNT(*)
					FROM ESTOQUE
					WHERE COD_EMPRESA = @COD_EMPRESA
						  AND @COD_MAT = COD_MAT) = 0
				OR (SELECT COUNT(*)
					FROM ESTOQUE_MOV
					WHERE COD_EMPRESA = @COD_EMPRESA
						  AND @COD_MAT = COD_MAT
						  AND LOTE = @LOTE) = 0)
					BEGIN
						SET @ERRO_INTERNO = 1
					END
				ELSE
					BEGIN
-- ATUALIZA ESTOQUE
					UPDATE ESTOQUE
					SET QTD_SALDO = QTD_SALDO - @QTD_MOV
					WHERE COD_EMPRESA = @COD_EMPRESA
						  AND @COD_MAT = COD_MAT;
-- ATUALIZA ESTOQUE_LOTE
					UPDATE ESTOQUE_LOTE
					SET QTD_LOTE = QTD_LOTE - @QTD_MOV
					WHERE COD_EMPRESA = @COD_EMPRESA
						  AND @COD_MAT = COD_MAT
						  AND LOTE = @LOTE
-- INSERT DE MOVIMENTAÇÃO
					INSERT ESTOQUE_MOV
					VALUES (@COD_EMPRESA,
							@TIPO_MOV,
							@COD_MAT,
							@LOTE,
							@QTD_MOV,
							@DATA_MOVTO,
							GETDATE(),
							SYSTEM_USER)
					PRINT 'BAIXA REALIZADA'
				END
			END
-- OPERAÇÃO DE ENTRADA
		IF (@TIPO_MOV = 'E')
			BEGIN
-- SE EXISTE MATERIAL ESTOQUE ATUALIZA SALDO
				IF (SELECT COUNT(*)
					FROM ESTOQUE
					WHERE COD_EMPRESA = @COD_EMPRESA
						  AND COD_MAT = @COD_MAT) > 0
					BEGIN
						UPDATE ESTOQUE
						SET QTD_SALDO = QTD_SALDO + @QTD_MOV
						WHERE COD_EMPRESA = @COD_EMPRESA
							  AND COD_MAT = @COD_MAT
						PRINT 'TEM ESTOQUE, FAZ UPDATE ESTOQUE'
					END
				ELSE
-- SENÃO REALIZA INSERT
					BEGIN
						INSERT INTO ESTOQUE
						VALUES (@COD_EMPRESA,
								@COD_MAT,
								@QTD_MOV)
						PRINT 'NÃO TEM ESTOQUE, FAZ INSERT ESTOQUE'
					END
-- SE EXISTE MATERIAL ESTOQUE_LOTE ATUALIZA SALDO
				IF (SELECT COUNT(*)
					FROM ESTOQUE_LOTE
					WHERE COD_EMPRESA = @COD_EMPRESA 
						  AND COD_MAT = @COD_MAT
						  AND LOTE = @LOTE) > 0
							BEGIN
								UPDATE ESTOQUE_LOTE
								SET QTD_LOTE = QTD_LOTE + @QTD_MOV
								WHERE COD_EMPRESA = @COD_EMPRESA
									  AND COD_MAT = @COD_MAT
									  AND LOTE = @LOTE
								PRINT 'TEM ESTOQUE_LOTE, FAZ UPDATE'
							END
				ELSE
-- SENÃO REALIZA INSERT
					BEGIN
						INSERT INTO ESTOQUE_LOTE
						VALUES (@COD_EMPRESA,
								@COD_MAT,
								@LOTE,
								@QTD_MOV)
						PRINT 'INSERT ESTOQUE_LOTE'
					END
-- INSERT MOVIMENTAÇÃO
				INSERT ESTOQUE_MOV
				VALUES (@COD_EMPRESA,
						@TIPO_MOV,
						@COD_MAT,
						@LOTE,
						@QTD_MOV,
						@DATA_MOVTO,
						GETDATE(),
						SYSTEM_USER);
				PRINT 'INSERT MOV_ESTOQUE'
			END
	END
-- VALIDAÇÕES FINAIS
	IF @@ERROR <> 0
		BEGIN
			ROLLBACK
			PRINT @@ERROR
			PRINT 'OPERAÇÃO CANCELADA'
		END
	ELSE IF @ERRO_INTERNO = 1
		BEGIN
			ROLLBACK
			RAISERROR ('ESTOQUE NEGATIVO', -- MESSAGE TEXT
						10, -- SEVERITY
						1); -- STATE
			PRINT 'OPERAÇÃO CANCELADA ROLLBACK'
		END
	ELSE IF @ERRO_INTERNO = 2
		BEGIN
			ROLLBACK
			RAISERROR ('MATERIAL NÃO EXISTE', -- MESSAGE TEXT
						10, -- SEVERITY
						1); -- STATE
			PRINT 'OPERAÇÃO CANCELADA ROLLBACK'
		END
	ELSE IF @ERRO_INTERNO = 3
		BEGIN
			ROLLBACK
			RAISERROR ('OPERAÇÃO NÃO PERMITIDA', -- MESSAGE TEXT
			10, -- SEVERITY
			1); -- STATE
			PRINT 'OPERAÇÃO CANCELADA ROLLBACK'
		END
	ELSE
		BEGIN
			COMMIT
			PRINT 'OPERAÇÃO CONCLUÍDA COM SUCESSO'
		END
END TRY
-- INICIANDO BEGIN CATCH
BEGIN CATCH
SELECT ERROR_NUMBER() AS ERRORNUMBER,
	   ERROR_SEVERITY() AS ERRORSEVERITY,
	   ERROR_STATE() AS ERRORSTATE,
	   ERROR_PROCEDURE() AS ERRORPROCEDURE,
	   ERROR_LINE() AS ERRORLINE,
	   ERROR_MESSAGE() AS ERRORMESSAGE;

		SET XACT_ABORT ON;
			IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;
-- FINALIZANDO CATCH
END CATCH
END

-- EXECUTANDO PROCEDURE PROC_GERA_ESTOQUE
EXEC PROC_GERA_ESTOQUE 1, 'X', 2, 'MIX BIKES', 50, '2020-01-31';

EXEC PROC_GERA_ESTOQUE 1, 'S', 2, 'MIX BIKES', 50, '2020-01-31';

EXEC PROC_GERA_ESTOQUE 1, 'E', 2, 'MIX BIKES', 50, '2020-01-31';

EXEC PROC_GERA_ESTOQUE 1, 'S', 2, 'MIX BIKES', 51, '2020-01-31';

EXEC PROC_GERA_ESTOQUE 1, 'E', 2, 'MIX BIKES', 30, '2020-01-31';

EXEC PROC_GERA_ESTOQUE 1, 'S', 2, 'MIX BIKES', 49, '2020-01-31';

EXEC PROC_GERA_ESTOQUE 1, 'E', 1, 'MIX BIKES', 50, '2020-01-31';