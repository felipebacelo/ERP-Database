USE ERP;

-- CRIANDO PROCEDURE PARA REALIZAR O APONTAMENTO DE PRODUÇÃO
CREATE PROCEDURE PROC_APONTAMENTO (@COD_EMPRESA INT,
				   @ID_ORDEM INT,
				   @COD_MAT_PROD INT,
				   @QTD_APON DECIMAL(10,2),
				   @LOTE_PROD VARCHAR(20))
AS
	BEGIN
		DECLARE @APONTAMENTO TABLE(ID_APON INT)
		DECLARE @QTD_PLAN DECIMAL(10,2),
		@QTD_PROD DECIMAL(10,2),
		@SALDO DECIMAL(10,2),
		@SALDO_AUX DECIMAL(10,2),
		@SITUACAO VARCHAR(1),
		@ERRO_INTERNO INT,
		@DATA_MOVTO DATE,
		@ID_APON INT,
		@COD_MAT_NECES INT,
		@QTD_ATEND DECIMAL(10,2),
		@QTD_LOTE DECIMAL(10,2),
		@TESTE INT,
		@COD_MAT_AUX INT,
		@QTD_NECES_CONS DECIMAL(10,2),
		@LOTE VARCHAR(20),
		@QTD_NECES DECIMAL(10,2)

		SET @DATA_MOVTO = GETDATE()

		BEGIN TRANSACTION
-- PRIMEIRA ETAPA - APONTAMENTO ATUALIZA ORDEM E MOVIMENTA ESTOQUE
			IF (SELECT COUNT(*) FROM ORDEM_PROD A
				WHERE COD_EMPRESA = @COD_EMPRESA
				AND A.COD_MAT_PROD = @COD_MAT_PROD
				AND A.ID_ORDEM = @ID_ORDEM
				AND A.SITUACAO = 'P') = 0 -- APENAS ORDENS PLANEJADAS
					BEGIN
						SET @ERRO_INTERNO = 1
						PRINT 'ERRO1'
					END
-- VERIFICANDO QTD APONTADA > SALDO PARA NÃO PERMITIR APONTAMENTO
			ELSE IF (SELECT A.QTD_PLAN - A.QTD_PROD FROM ORDEM_PROD A
					 WHERE COD_EMPRESA = @COD_EMPRESA
					 AND A.ID_ORDEM = @ID_ORDEM) < @QTD_APON
						 BEGIN
							SET @ERRO_INTERNO = 2
							PRINT 'ERRO2'
						 END
-- VERIFICANDO SE OS MATERIAIS NECESSÁRIOS TEM SALDO PARA CONSUMO
			ELSE IF (SELECT COUNT(*) FROM ORDEM_PROD A
						INNER JOIN FICHA_TECNICA B
						ON A.COD_EMPRESA = B.COD_EMPRESA
						AND A.COD_MAT_PROD = B.COD_MAT_PROD
						INNER JOIN ESTOQUE C
						ON A.COD_EMPRESA = C.COD_EMPRESA
						AND B.COD_MAT_NECES = C.COD_MAT
					 WHERE A.COD_EMPRESA = @COD_EMPRESA
					 AND A.ID_ORDEM = @ID_ORDEM
					 AND (B.QTD_NECES * @QTD_APON) > C.QTD_SALDO) > 0
						BEGIN
							SET @ERRO_INTERNO = 3
							PRINT 'ERRO3'
						END
			ELSE
				BEGIN
					BEGIN TRY
					DECLARE APONT CURSOR FOR
						SELECT A.ID_ORDEM, A.COD_MAT_PROD, A.QTD_PLAN, A.QTD_PROD
						FROM ORDEM_PROD A
						WHERE A.COD_EMPRESA = @COD_EMPRESA
						AND A.COD_MAT_PROD = @COD_MAT_PROD
						AND ID_ORDEM = @ID_ORDEM
						AND A.SITUACAO = 'P' -- APENAS ORDENS PLANEJADAS

					OPEN APONT
					FETCH NEXT FROM APONT
					INTO @ID_ORDEM, @COD_MAT_PROD, @QTD_PLAN, @QTD_PROD
					WHILE @@FETCH_STATUS = 0
						BEGIN
							SELECT @ID_ORDEM ID_ORDEM, @COD_MAT_PROD COD_MAT_PROD,
							@QTD_PLAN QTD_PLAN, @QTD_PROD QTD_PROD, @QTD_PLAN-@QTD_PROD SALDO
							SELECT 'QTD APONTADA ', @QTD_APON;
							SELECT 'SALDO ORDEM ', @QTD_PLAN - (@QTD_PROD + @QTD_APON);
							SET @SALDO = @QTD_PLAN - @QTD_PROD
							SET @SALDO_AUX = @SALDO
							
							INSERT INTO APONTAMENTOS
							OUTPUT INSERTED.ID_APON INTO @APONTAMENTO
							VALUES (@COD_EMPRESA, @ID_ORDEM, @COD_MAT_PROD, @QTD_APON,
							GETDATE(), SYSTEM_USER, @LOTE_PROD)
							SELECT @ID_APON = ID_APON FROM @APONTAMENTO
-- EXECUTANDO PROC_GERA_ESTOQUE
							EXEC PROC_GERA_ESTOQUE @COD_EMPRESA, 'E', @COD_MAT_PROD,
							@LOTE_PROD, @QTD_APON, @DATA_MOVTO
							UPDATE ORDEM_PROD SET QTD_PROD = @QTD_PROD + @QTD_APON
							WHERE COD_EMPRESA = @COD_EMPRESA
							AND ID_ORDEM = @ID_ORDEM
							AND COD_MAT_PROD = @COD_MAT_PROD
							SELECT 'ORDEM ATUALIZADA'
							SET @SALDO = @QTD_PLAN - (@QTD_PROD + @QTD_APON);
							SET @SALDO_AUX = @SALDO

							FETCH NEXT FROM APONT
							INTO @ID_ORDEM, @COD_MAT_PROD, @QTD_PLAN, @QTD_PROD
						END
					CLOSE APONT
					DEALLOCATE APONT
					END TRY
						BEGIN CATCH
							SET @ERRO_INTERNO = 5;
							PRINT ''
							PRINT 'ERRO OCORREU'
							PRINT 'MENSAGEM: ' + ERROR_MESSAGE()
							PRINT 'PROCEDURE: ' + ERROR_PROCEDURE()
						END CATCH

-- SEGUNDA ETAPA - CONSUMINDO NECESSIDADES E MOVIMENTANDO ESTOQUE
					BEGIN TRY
						DECLARE NECESSIDADES CURSOR FOR
							SELECT A.ID_ORDEM, A.SITUACAO, A.COD_MAT_PROD, A.QTD_PLAN, B.COD_MAT_NECES,
							B.QTD_NECES, @QTD_APON QTD_APON, @QTD_APON * B.QTD_NECES QTD_NECES_CONS
							FROM ORDEM_PROD A
								INNER JOIN FICHA_TECNICA B
								ON A.COD_EMPRESA = B.COD_EMPRESA
								AND A.COD_MAT_PROD = B.COD_MAT_PROD
							WHERE A.SITUACAO = 'P'
							AND A.COD_EMPRESA = @COD_EMPRESA
							AND A.ID_ORDEM = @ID_ORDEM
							AND A.COD_MAT_PROD = @COD_MAT_PROD
						OPEN NECESSIDADES
						FETCH NEXT FROM NECESSIDADES
						INTO @ID_ORDEM, @SITUACAO, @COD_MAT_PROD, @QTD_PLAN,
						@COD_MAT_NECES, @QTD_NECES, @QTD_APON, @QTD_NECES_CONS
						WHILE @@FETCH_STATUS = 0
							BEGIN
								SELECT @ID_ORDEM ID_ORDEM, @SITUACAO SITUACAO, @COD_MAT_PROD COD_MAT_PROD,
								@QTD_PLAN QTD_PLAN, @COD_MAT_NECES COD_MAT_NECES, @QTD_NECES QTD_NECES,
								@QTD_APON QTD_APON, @QTD_NECES_CONS QTD_NECES_CONS
									DECLARE ESTOQUE_CONSUMO CURSOR FOR
										SELECT C.COD_MAT, C.QTD_LOTE, C.LOTE, @QTD_NECES_CONS
										FROM ESTOQUE_LOTE C
										WHERE C.COD_EMPRESA = @COD_EMPRESA
										AND C.COD_MAT = @COD_MAT_NECES
										AND C.QTD_LOTE > 0
										ORDER BY C.COD_MAT, C.LOTE
									OPEN ESTOQUE_CONSUMO
									FETCH NEXT FROM ESTOQUE_CONSUMO
									INTO @COD_MAT_NECES, @QTD_LOTE, @LOTE, @QTD_NECES_CONS
									SET @SALDO = @QTD_NECES_CONS;
									SET @SALDO_AUX = @SALDO
									WHILE @@FETCH_STATUS = 0
										BEGIN
-- VERIFICAÇÃO DE TROCA DE MATERIAL
											IF @COD_MAT_AUX <> @COD_MAT_NECES
												BEGIN
													SET @QTD_ATEND = 0
												END
-- VERIFICAÇÃO DE SALDO <= 0	 
											IF @SALDO <= 0
												BEGIN
													SET @QTD_ATEND = 0
												END
-- VERIFICAÇÃO SE SALDO_AUX >= QTD_LOTE
											IF @SALDO_AUX >= @QTD_LOTE
												BEGIN
													SET @QTD_ATEND = @QTD_LOTE
													SET @SALDO = @SALDO - @QTD_NECES_CONS
													SET @SALDO_AUX = @SALDO_AUX - @QTD_LOTE
													SET @TESTE= '1'
												END
-- VERIFICAÇÃO SE SALDO_AUX < QTD_LOTE
											ELSE IF  @SALDO_AUX < @QTD_LOTE
												BEGIN
													SET @SALDO = @QTD_NECES_CONS
													SET @QTD_ATEND = @SALDO_AUX
													SET @SALDO_AUX = @SALDO_AUX - @QTD_ATEND
													SET @TESTE= '2'
												END
-- INSERINDO APENAS RETORNO COM SALDO >= 0 E QTD_ATEND > 0  
											IF @SALDO_AUX >= 0 AND @QTD_ATEND > 0
												BEGIN
													SELECT @COD_MAT_NECES COD_MAT_NECES ,@QTD_LOTE QTD_LOTE, @LOTE LOTE,
													@QTD_NECES_CONS QTD_NECES_CONS, @SALDO SALDO, @SALDO_AUX SALDO_AUX,
													@QTD_ATEND BAIXA, @TESTE TESTE
													INSERT INTO CONSUMO VALUES (@COD_EMPRESA, @ID_APON, @COD_MAT_NECES,
													@QTD_ATEND, @LOTE)
													EXEC PROC_GERA_ESTOQUE @COD_EMPRESA, 'S' ,@COD_MAT_NECES,
													@LOTE, @QTD_ATEND, @DATA_MOVTO
													SET @COD_MAT_AUX = @COD_MAT_NECES;
												END
											FETCH NEXT FROM ESTOQUE_CONSUMO
											INTO @COD_MAT_NECES, @QTD_LOTE, @LOTE, @QTD_NECES_CONS
										END
									CLOSE ESTOQUE_CONSUMO
									DEALLOCATE ESTOQUE_CONSUMO
									
									FETCH NEXT FROM NECESSIDADES
									INTO @ID_ORDEM, @SITUACAO, @COD_MAT_PROD,
									@QTD_PLAN, @COD_MAT_NECES, @QTD_NECES,
									@QTD_APON, @QTD_NECES_CONS
								END
							CLOSE NECESSIDADES
							DEALLOCATE NECESSIDADES
					END TRY
						BEGIN CATCH
							SET @ERRO_INTERNO = 5 ;
							PRINT ''
							PRINT 'ERRO OCORREU'
							PRINT 'MENSAGEM: ' + ERROR_MESSAGE()
							PRINT 'PROCEDURE: ' + ERROR_PROCEDURE()

							IF (SELECT CURSOR_STATUS('GLOBAL', 'APONT')) = 1
								BEGIN
									CLOSE APONT
									DEALLOCATE APONT
								END
							IF (SELECT CURSOR_STATUS('GLOBAL', 'ESTOQUE_CONSUMO')) = 1
								BEGIN
									CLOSE ESTOQUE_CONSUMO
									DEALLOCATE ESTOQUE_CONSUMO
								END
							IF (SELECT CURSOR_STATUS('GLOBAL', 'NECESSIDADES')) = 1
								BEGIN
									CLOSE NECESSIDADES
									DEALLOCATE NECESSIDADES
								END
								SET XACT_ABORT ON;
									IF @@TRANCOUNT > 0
										ROLLBACK TRANSACTION;
						END CATCH
					END
			IF (SELECT A.QTD_PLAN - A.QTD_PROD SALDO FROM ORDEM_PROD A
				WHERE COD_EMPRESA = @COD_EMPRESA
				AND A.ID_ORDEM = @ID_ORDEM
				AND A.SITUACAO = 'P') = 0
					BEGIN
						UPDATE ORDEM_PROD SET SITUACAO = 'F'
						WHERE COD_EMPRESA = @COD_EMPRESA
						AND ID_ORDEM = @ID_ORDEM
						AND SITUACAO = 'P'
						SELECT 'ORDEM FINALIZADA'
					END
-- VALIDAÇÕES FINAIS
						IF @@ERROR <> 0
							BEGIN
								ROLLBACK
								PRINT @@ERROR
								PRINT 'OPERAÇÃO CANCELADA'
							END
						ELSE IF @ERRO_INTERNO = 1
							BEGIN
								PRINT 'ORDEM NÃO EXISTE OU SEM SALDO/PARÂMETROS INCORRETOS'
								ROLLBACK
							END
						ELSE IF @ERRO_INTERNO = 2
							BEGIN
								PRINT 'SALDO INSUFICIENTE DA ORDEM'
								ROLLBACK
							END
						ELSE IF @ERRO_INTERNO = 3
							BEGIN
								PRINT 'MATERIAIS NECESSÁRIOS INSUFICENTES'
								ROLLBACK
							END
						ELSE IF @ERRO_INTERNO = 5
							BEGIN
								PRINT 'ERRO PROCEDURE DE ESTOQUE'
								ROLLBACK
							END
						ELSE
							BEGIN
								COMMIT
								PRINT 'APONTAMENTO CONCLUÍDO'
							END
END;

-- EXECUTANDO PROCEDURE PROC_APONTAMENTO
EXEC PROC_APONTAMENTO 2, 1, 1, 10, 'TESTE1';

EXEC PROC_APONTAMENTO 1, 1, 2, 10, 'TESTE1';

EXEC PROC_APONTAMENTO 1, 1, 1, 40, 'TESTE1';

EXEC PROC_APONTAMENTO 1, 1, 1, 10, 'TESTE1';

EXEC PROC_APONTAMENTO 1, 1, 1, 25, 'TESTE2';